login.htmlは存在します。
accounts/urls.pyの修正で、エラーは発生しなくなりましたが、
今度は、ログイン後のページでログアウトボタンを押すと、「HTTP ERROR 405（このページは動作していません）」と表示されます。
コンソールのログは以下の通りです。

*コンソールログ：
System check identified no issues (0 silenced).
January 18, 2025 - 20:23:27
Django version 5.0.7, using settings 'project.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.

Method Not Allowed (GET): /logout/
Method Not Allowed: /logout/
[18/Jan/2025 20:23:31] "GET /logout/ HTTP/1.1" 405 0
Method Not Allowed (GET): /logout/
Method Not Allowed: /logout/
[18/Jan/2025 20:23:34] "GET /logout/ HTTP/1.1" 405 0
User: abc001, Authenticated: True
[18/Jan/2025 20:23:54] "GET / HTTP/1.1" 200 1130
Method Not Allowed (GET): /logout/
Method Not Allowed: /logout/
[18/Jan/2025 20:23:56] "GET /logout/ HTTP/1.1" 405 0

また、関連するソースは以下の通りです。
*templetes/accounts/login.html
{% extends 'base.html' %}

{% block title %}
<div class="h1">Login</div>
{% endblock %}
{% block content %}
<form method="post">
    {% csrf_token %}
    {{ form.non_field_errors }}
    {% for field in form %}
    {{ field.label }}
    {{ field }}
    {{ field.errors }}
    <br>
    {% endfor %}
    <div class="mt-3">
        <button type="submit" class="btn btn-primary">Login</button>
        <a href="{% url 'accounts:index' %}" class="btn btn-secondary">Back</a>
    </div>
</form>
{% endblock %}


*project/settings.py
"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-d+sx=q$ql_t7nu3d18ssmvbt$sq12exkx+23wy_lw9*i6(vk5v'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts' # 追加
]

# 追加
AUTH_USER_MODEL = "accounts.User" # カスタムユーザーを認証用ユーザーとして登録

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # templatesディレクトリを設定
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]
AUTH_PASSWORD_VALIDATORS = []

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = "accounts:index"
# LOGOUT_REDIRECT_URL = "accounts:login"
LOGOUT_REDIRECT_URL = "/"  # ログアウト後のリダイレクト先


*accounts/view.py
from django.contrib.auth import login, authenticate
from django.views.generic import TemplateView, CreateView
from django.urls import reverse_lazy
from .forms import SignUpForm

from .forms import SignUpForm, LoginFrom # ログインフォームをimport
#Logout
from django.contrib.auth.views import LoginView as BaseLoginView,  LogoutView as BaseLogoutView

import logging
from logging import getLogger
logger = getLogger(__name__)
# コンソール出力用のハンドラーを作成
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG)  # ハンドラーのログレベルを設定
# フォーマットを定義
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
console_handler.setFormatter(formatter)
# ハンドラーをロガーに追加
logger.addHandler(console_handler)
print("set logger - " + '{}'.format(logger.name))


class IndexView(TemplateView):
    """ ホームビュー """
    template_name = "index.html"

    # index.html表示時に ボタンが表示されずNoneとなるため、以下の処理を追加
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        logger.info(f"User: {self.request.user}, Authenticated: {self.request.user.is_authenticated}")
        print(f"User: {self.request.user}, Authenticated: {self.request.user.is_authenticated}")
        return context


class SignupView(CreateView):
    """ ユーザー登録用ビュー """
    form_class = SignUpForm # 作成した登録用フォームを設定
    template_name = "accounts/signup.html" 
    success_url = reverse_lazy("accounts:index") # ユーザー作成後のリダイレクト先ページ

    def form_valid(self, form):
        # ユーザー作成後にそのままログイン状態にする設定
        response = super().form_valid(form)
        account_id = form.cleaned_data.get("account_id")
        password = form.cleaned_data.get("password1")
        user = authenticate(account_id=account_id, password=password)
        login(self.request, user)
        return response

# ログインビューを作成
class LoginView(BaseLoginView):
    form_class = LoginFrom
    template_name = "accounts/login.html"

# LogoutViewを追加
class LogoutView(BaseLogoutView):
    success_url = reverse_lazy("accounts:index")

*accounts/urls.py
from django.urls import path

from . import view

app_name = "accounts"

urlpatterns = [
    path("", view.IndexView.as_view(), name="index"),
    path('signup/', view.SignupView.as_view(), name="signup"),
    path('login/', view.LoginView.as_view(), name="login"),
    path('logout/', view.LogoutView.as_view(), name="logout"), # 追加
]

*******

エラーログの内容から、「ログアウトにGETリクエストが送信され、405エラー (Method Not Allowed)」が発生していることがわかります。LogoutView はデフォルトで POST リクエストを要求するため、GET リクエストでアクセスするとエラーになります。

admin
utauinu gmail
password
